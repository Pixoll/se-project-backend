openapi: 3.0.3
info:
  title: Software Engineering class project - API
  version: 1.0.0
servers:
  - url: /api/v1
tags:
  - name: Clinic
  - name: Patients
  - name: Ping
  - name: Medics
  - name: Misc
  - name: Schedule
components:
  responses:
    UnauthorizedError:
      description: Session token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    BloodType:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
    Clinic:
      type: object
      required:
        - name
        - email
        - phone
        - address
        - openingTime
        - closingTime
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: number
        address:
          type: string
        openingTime:
          $ref: "#/components/schemas/Time"
        closingTime:
          $ref: "#/components/schemas/Time"
    ClinicSchedule:
      type: object
      required:
        - rut
        - fullName
        - specialty
        - slots
      properties:
        rut:
          $ref: "#/components/schemas/Rut"
        fullName:
          type: string
        specialty:
          type: string
        slots:
          type: array
          items:
            $ref: "#/components/schemas/ClinicScheduleTimeSlot"
    ClinicScheduleTimeSlot:
      type: object
      required:
        - id
        - day
        - start
        - end
        - appointmentDates
      properties:
        id:
          type: number
          minimum: 1
        day:
          type: string
          enum: [ mo, tu, we, th, fr, sa, su ]
        start:
          $ref: "#/components/schemas/Time"
        end:
          $ref: "#/components/schemas/Time"
        appointmentDates:
          type: array
          items:
            $ref: "#/components/schemas/Date"
    Date:
      type: string
      pattern: ^\d{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])$
    Email:
      type: string
      pattern: ^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
    Error:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          description: HTTP status code.
        message:
          type: string
          description: Message explaining the cause.
    InsuranceType:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
    Medic:
      type: object
      required:
        - fullName
        - email
        - phone
        - birthDate
        - gender
        - specialty
      properties:
        rut:
          type: string
        fullName:
          type: string
        email:
          $ref: "#/components/schemas/Email"
        phone:
          $ref: "#/components/schemas/Phone"
        birthDate:
          $ref: "#/components/schemas/Date"
        gender:
          type: string
        specialty:
          type: string
    NewPatient:
      type: object
      required:
        - firstName
        - firstLastName
        - email
        - phone
        - birthDate
        - gender
        - weight
        - height
        - rhesusFactor
        - bloodTypeId
        - insuranceTypeId
        - password
      properties:
        firstName:
          type: string
        secondName:
          type: string
        firstLastName:
          type: string
        secondLastName:
          type: string
        email:
          $ref: "#/components/schemas/Email"
        phone:
          $ref: "#/components/schemas/Phone"
        birthDate:
          $ref: "#/components/schemas/Date"
        gender:
          type: string
        weight:
          type: number
          minimum: 0
          exclusiveMinimum: true
        height:
          type: number
          minimum: 0
          exclusiveMinimum: true
        rhesusFactor:
          type: string
          enum: [ "+", "-" ]
        bloodTypeId:
          type: number
          minimum: 1
        insuranceTypeId:
          type: number
          minimum: 1
        password:
          type: string
          minLength: 8
    PartialClinic:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: number
        address:
          type: string
        openingTime:
          type: string
        closingTime:
          type: string
    Patient:
      type: object
      required:
        - firstName
        - firstLastName
        - email
        - phone
        - birthDate
        - gender
        - weight
        - height
        - rhesusFactor
        - bloodType
        - insuranceType
        - medicalRecord
      properties:
        firstName:
          type: string
        secondName:
          type: string
        firstLastName:
          type: string
        secondLastName:
          type: string
        email:
          $ref: "#/components/schemas/Email"
        phone:
          $ref: "#/components/schemas/Phone"
        birthDate:
          $ref: "#/components/schemas/Date"
        gender:
          type: string
        weight:
          type: number
          minimum: 0
          exclusiveMinimum: true
        height:
          type: number
          minimum: 0
          exclusiveMinimum: true
        rhesusFactor:
          type: string
          enum: [ "+", "-" ]
        bloodType:
          type: string
        insuranceType:
          type: string
        allergiesHistory:
          type: string
          maxLength: 1000
        morbidityHistory:
          type: string
          maxLength: 1000
        surgicalHistory:
          type: string
          maxLength: 1000
        medications:
          type: string
          maxLength: 1000
    PatientUpdate:
      type: object
      properties:
        firstName:
          type: string
        secondName:
          type: string
        firstLastName:
          type: string
        secondLastName:
          type: string
        email:
          $ref: "#/components/schemas/Email"
        phone:
          $ref: "#/components/schemas/Phone"
        birthDate:
          $ref: "#/components/schemas/Date"
        gender:
          type: string
        weight:
          type: number
          minimum: 0
          exclusiveMinimum: true
        height:
          type: number
          minimum: 0
          exclusiveMinimum: true
        rhesusFactor:
          type: string
          enum: [ "+", "-" ]
        bloodTypeId:
          type: number
          minimum: 1
        insuranceTypeId:
          type: number
          minimum: 1
    Phone:
      type: number
      minimum: 100000000
      maximum: 999999999
    Rut:
      type: string
      pattern: ^\d{7,9}-[\dk]$
    ScheduleSlot:
      type: object
      required:
        - day
        - start
        - end
      properties:
        day:
          type: string
          enum: [ mo, tu, we, th, fr, sa, su ]
        start:
          $ref: "#/components/schemas/Time"
        end:
          $ref: "#/components/schemas/Time"
    ScheduleSlotUpdate:
      type: object
      properties:
        day:
          type: string
          enum: [ mo, tu, we, th, fr, sa, su ]
        start:
          $ref: "#/components/schemas/Time"
        end:
          $ref: "#/components/schemas/Time"
    Specialty:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
    Time:
      type: string
      pattern: ^(?:[0-1][0-9]|2[0-3]):[0-5][0-9]$
  securitySchemes:
    PatientSessionToken:
      type: http
      scheme: bearer
      description: The patient's session token.
    MedicSessionToken:
      type: http
      scheme: bearer
      description: The medic's session token.
    AdminSessionToken:
      type: http
      scheme: bearer
      description: The admin's session token.
paths:
  /blood_types:
    get:
      tags: [ Misc ]
      summary: Get a list of all blood types.
      responses:
        200:
          description: Successfully retrieved the list of blood types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BloodType"
  /clinic:
    get:
      tags: [ Clinic ]
      summary: Get the clinic's information.
      responses:
        200:
          description: Successfully retrieved the clinic's information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clinic"
    patch:
      tags: [ Clinic ]
      summary: Update the clinic's information.
      responses:
        204:
          description: Successfully updated the clinic's information.
        304:
          description: Nothing has changed.
        400:
          description: Request body is empty or invalid data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /insurance_types:
    get:
      tags: [ Misc ]
      summary: Get a list of all insurance types.
      responses:
        200:
          description: Successfully retrieved the list of insurance types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InsuranceType"
  /medics:
    get:
      tags: [ Medics ]
      summary: Get a list of all medics.
      responses:
        200:
          description: Successfully retrieved medics list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Medic"
  /medics/{rut}:
    get:
      tags: [ Medics ]
      summary: Get a medic by their rut.
      security:
        - MedicSessionToken: [ ]
        - AdminSessionToken: [ ]
      responses:
        200:
          description: Successfully retrieved the medic's information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Medic"
        400:
          description: Malformed rut.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Medic does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: rut
        in: path
        description: The medic's rut.
        required: true
        schema:
          $ref: "#/components/schemas/Rut"
  /medics/{rut}/schedule:
    get:
      tags: [ Medics, Schedule ]
      summary: Get a medic's schedule by their rut.
      security:
        - MedicSessionToken: [ ]
        - AdminSessionToken: [ ]
      responses:
        200:
          description: Successfully retrieved the medic's schedule.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/ScheduleSlot"
                    - type: object
                      required:
                        - id
                        - active
                      properties:
                        id:
                          type: number
                        active:
                          type: boolean
        400:
          description: Malformed rut.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Medic does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: rut
        in: path
        description: The medic's rut.
        required: true
        schema:
          $ref: "#/components/schemas/Rut"
  /medics/{rut}/schedule/slots:
    post:
      tags: [ Medics, Schedule ]
      summary: Add a new slot to the medic's schedule.
      security:
        - MedicSessionToken: [ ]
        - AdminSessionToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScheduleSlot"
      responses:
        201:
          description: Successfully created the new slot.
        400:
          description: Malformed rut or slot data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Medic does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: rut
        in: path
        description: The medic's rut.
        required: true
        schema:
          $ref: "#/components/schemas/Rut"
  /medics/{rut}/schedule/slots/{id}:
    patch:
      tags: [ Medics, Schedule ]
      summary: Update a medic's schedule slot by its id.
      security:
        - MedicSessionToken: [ ]
        - AdminSessionToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScheduleSlotUpdate"
      responses:
        201:
          description: Successfully updated the slot.
        304:
          description: Slot was not modified.
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Medic or slot not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [ Medics, Schedule ]
      summary: Delete a medic's schedule slot by its id.
      security:
        - MedicSessionToken: [ ]
        - AdminSessionToken: [ ]
      responses:
        201:
          description: Successfully deleted the slot.
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Medic or slot do not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: rut
        in: path
        description: The medic's rut.
        required: true
        schema:
          $ref: "#/components/schemas/Rut"
      - name: id
        in: path
        description: The time slot's id.
        required: true
        schema:
          type: number
          minimum: 1
  /patients/{rut}:
    get:
      tags: [ Patients ]
      summary: Get a patient's information. Patients can only access their own information.
      security:
        - PatientSessionToken: [ ]
        - MedicSessionToken: [ ]
        - AdminSessionToken: [ ]
      responses:
        200:
          description: Successfully retrieved the patient's information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
        400:
          description: Malformed rut.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Patient does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags: [ Patients ]
      summary: Register a new patient.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPatient"
      responses:
        201:
          description: Successfully registered patient.
        400:
          description: Malformed rut or patient data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Patient with that rut, email or phone already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags: [ Patients ]
      summary: Update a patient's data. Patients can only update their own information.
      security:
        - PatientSessionToken: [ ]
        - MedicSessionToken: [ ]
        - AdminSessionToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientUpdate"
      responses:
        204:
          description: Successfully updated patient.
        304:
          description: Patient was not modified.
        400:
          description: Malformed rut or patient data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Patient does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Patient with that email or phone already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    parameters:
      - name: rut
        in: path
        description: The patient's rut.
        required: true
        schema:
          $ref: "#/components/schemas/Rut"
  /patients/{rut}/session:
    post:
      tags: [ Patients ]
      summary: Generate a new session token for the selected patient.
      requestBody:
        description: The patient's password.
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
      responses:
        201:
          description: Session token successfully generated.
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
        400:
          description: Password missing in request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Incorrect password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Patient does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [ Patients ]
      summary: Revoke the patient's session token.
      security:
        - PatientSessionToken: [ ]
      responses:
        204:
          description: Token successfully revoked.
        401:
          $ref: "#/components/responses/UnauthorizedError"
    parameters:
      - name: rut
        in: path
        description: The patient's rut.
        required: true
        schema:
          $ref: "#/components/schemas/Rut"
  /ping:
    get:
      tags: [ Ping ]
      summary: Check if the API is available.
      responses:
        200:
          description: API is available.
  /schedule:
    get:
      tags: [ Medics, Schedule ]
      summary: Get the clinic's current appointments schedule.
      responses:
        200:
          description: Successfully retrieved the schedule.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClinicSchedule"
        400:
          description: Specialties query contains invalid id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      parameters:
        - name: medics
          in: query
          description: The ruts of the selected medics.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Rut"
        - name: specialties
          in: query
          description: The ids of the selected specialties.
          schema:
            type: array
            items:
              type: number
              minimum: 1
  /specialties:
    get:
      tags: [ Medics, Misc ]
      summary: Get a list of all specialties.
      responses:
        200:
          description: Successfully retrieved the list of specialties.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Specialty"
